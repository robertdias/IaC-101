{
    "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
    "contentVersion": "1.0.0.0",
    "parameters": {
        "databaseName": {
            "type": "string",
            "metadata": {
                "description": "Required. The name of the SQL managed instance database."
            }
        },
        "managedInstanceName": {
            "type": "string",
            "metadata": {
                "description": "Required. The name of the SQL managed instance."
            }
        },
        "location": {
            "type": "string",
            "defaultValue": "[resourceGroup().location]",
            "metadata": {
                "description": "Optional. Location for all resources."
            }
        },
        "collation": {
            "type": "string",
            "defaultValue": "SQL_Latin1_General_CP1_CI_AS",
            "metadata": {
                "description": "Optional. Collation of the managed instance database."
            }
        },
        "restorePointInTime": {
            "type": "string",
            "defaultValue": "",
            "metadata": {
                "description": "Optional. Conditional. If createMode is PointInTimeRestore, this value is required. Specifies the point in time (ISO8601 format) of the source database that will be restored to create the new database."
            }
        },
        "catalogCollation": {
            "type": "string",
            "defaultValue": "SQL_Latin1_General_CP1_CI_AS",
            "metadata": {
                "description": "Optional. Collation of the managed instance."
            }
        },
        "createMode": {
            "type": "string",
            "defaultValue": "Default",
            "allowedValues": [
                "Default",
                "RestoreExternalBackup",
                "PointInTimeRestore",
                "Recovery",
                "RestoreLongTermRetentionBackup"
            ],
            "metadata": {
                "description": "Optional. Managed database create mode. PointInTimeRestore: Create a database by restoring a point in time backup of an existing database. SourceDatabaseName, SourceManagedInstanceName and PointInTime must be specified. RestoreExternalBackup: Create a database by restoring from external backup files. Collation, StorageContainerUri and StorageContainerSasToken must be specified. Recovery: Creates a database by restoring a geo-replicated backup. RecoverableDatabaseId must be specified as the recoverable database resource ID to restore."
            }
        },
        "storageContainerUri": {
            "type": "string",
            "defaultValue": "",
            "metadata": {
                "description": "Optional. Conditional. If createMode is RestoreExternalBackup, this value is required. Specifies the uri of the storage container where backups for this restore are stored."
            }

        },
        "sourceDatabaseId": {
            "type": "string",
            "defaultValue": "",
            "metadata": {
                "description": "Optional. Conditional. The resource identifier of the source database associated with create operation of this database."
            }
        },
        "restorableDroppedDatabaseId": {
            "type": "string",
            "defaultValue": "",
            "metadata": {
                "description": "Optional. Conditional. The restorable dropped database resource id to restore when creating this database."
            }
        },
        "storageContainerSasToken": {
            "type": "string",
            "defaultValue": "",
            "metadata": {
                "description": "Optional. Conditional. If createMode is RestoreExternalBackup, this value is required. Specifies the storage container sas token."
            }
        },
        "recoverableDatabaseId": {
            "type": "string",
            "defaultValue": "",
            "metadata": {
                "description": "Optional. Conditional. The resource identifier of the recoverable database associated with create operation of this database."
            }
        },
        "longTermRetentionBackupResourceId": {
            "type": "string",
            "defaultValue": "",
            "metadata": {
                "description": "Optional. Conditional. The name of the Long Term Retention backup to be used for restore of this managed database."
            }
        },
        "diagnosticLogsRetentionInDays": {
            "type": "int",
            "defaultValue": 365,
            "minValue": 0,
            "maxValue": 365,
            "metadata": {
                "description": "Optional. Specifies the number of days that logs will be kept for; a value of 0 will retain data indefinitely."
            }
        },
        "diagnosticStorageAccountId": {
            "type": "string",
            "defaultValue": "",
            "metadata": {
                "description": "Optional. Resource identifier of the Diagnostic Storage Account."
            }
        },
        "workspaceId": {
            "type": "string",
            "defaultValue": "",
            "metadata": {
                "description": "Optional. Resource identifier of Log Analytics."
            }
        },
        "eventHubAuthorizationRuleId": {
            "type": "string",
            "defaultValue": "",
            "metadata": {
                "description": "Optional. Resource ID of the event hub authorization rule for the Event Hubs namespace in which the event hub should be created or streamed to."
            }
        },
        "eventHubName": {
            "type": "string",
            "defaultValue": "",
            "metadata": {
                "description": "Optional. Name of the event hub within the namespace to which logs are streamed. Without this, an event hub is created for each log category."
            }
        },
        "lockForDeletion": {
            "type": "bool",
            "defaultValue": false,
            "metadata": {
                "description": "Optional. Switch to lock Key Vault from deletion."
            }
        },
        "backupLongTermRetentionPoliciesName": { //LTR Not used yet
            "type": "string",
            "defaultValue": "LTRdefault",
            "metadata": {
                "description": "Required. The name of the Long Term Retention backup policy."
            }
        },
        "weeklyRetention": { //LTR Not used yet
            "type": "string",
            "defaultValue": "P1M",
            "metadata": {
                "description": "Required. The weekly retention policy for an LTR backup in an ISO 8601 format."
            }
        },
        "monthlyRetention": { //LTR Not used yet
            "type": "string",
            "defaultValue": "P1Y",
            "metadata": {
                "description": "Required. The monthly retention policy for an LTR backup in an ISO 8601 format."
            }
        },
        "yearlyRetention": { //LTR Not used yet
            "type": "string",
            "defaultValue": "P5Y",
            "metadata": {
                "description": "Required. The yearly retention policy for an LTR backup in an ISO 8601 format."
            }
        },
        "weekOfYear": { //LTR Not used yet
            "type": "int",
            "defaultValue": 5,
            "metadata": {
                "description": "Required. The week of year to take the yearly backup in an ISO 8601 format."
            }
        },
        "backupShortTermRetentionPoliciesName": {
            "type": "string",
            "defaultValue": "Default",
            "metadata": {
                "description": "Required. The name of the Short Term Retention backup policy."
            }
        },
        "retentionDays": {
            "type": "int",
            "defaultValue": 35,
            "metadata": {
                "description": "Required. The backup retention period in days. This is how many days Point-in-Time Restore will be supported."
            }
        },
        "tags": {
            "type": "object",
            "defaultValue": {
            },
            "metadata": {
                "description": "Optional. Tags of the resource."
            }
        },
        "cuaId": {
            "type": "string",
            "defaultValue": "",
            "metadata": {
                "description": "Optional. Customer Usage Attribution id (GUID). This GUID must be previously registered"
            }
        }
    },
    "variables": {

        "diagnosticsLogs": [
            {
                "category": "SQLInsights",
                "enabled": true,
                "retentionPolicy": {
                    "enabled": true,
                    "days": "[parameters('diagnosticLogsRetentionInDays')]"
                }
            },
            {
                "category": "QueryStoreRuntimeStatistics",
                "enabled": true,
                "retentionPolicy": {
                    "enabled": true,
                    "days": "[parameters('diagnosticLogsRetentionInDays')]"
                }
            },
            {
                "category": "QueryStoreWaitStatistics",
                "enabled": true,
                "retentionPolicy": {
                    "enabled": true,
                    "days": "[parameters('diagnosticLogsRetentionInDays')]"
                }
            },
            {
                "category": "Errors",
                "enabled": true,
                "retentionPolicy": {
                    "enabled": true,
                    "days": "[parameters('diagnosticLogsRetentionInDays')]"
                }
            }
        ]
    },
    "resources": [
        {
            "condition": "[not(empty(parameters('cuaId')))]",
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "2020-06-01",
            "name": "[concat('pid-', parameters('cuaId'))]",
            "properties": {
                "mode": "Incremental",
                "template": {
                    "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                    "contentVersion": "1.0.0.0",
                    "resources": [
                    ]
                }
            }
        },
        {
            "type": "Microsoft.Sql/managedInstances/databases",
            "apiVersion": "2020-02-02-preview",
            "name": "[concat(parameters('managedInstanceName'), '/', parameters('databaseName'))]",
            "location": "[parameters('location')]",
            "tags": "[parameters('tags')]",
            "properties": {
                "collation": "[if(empty(parameters('collation')), json('null'), parameters('collation'))]",
                "restorePointInTime": "[if(empty(parameters('restorePointInTime')), json('null'), parameters('restorePointInTime'))]",
                "catalogCollation": "[if(empty(parameters('catalogCollation')), json('null'), parameters('catalogCollation'))]",
                "createMode": "[if(empty(parameters('createMode')), json('null'), parameters('createMode'))]",
                "storageContainerUri": "[if(empty(parameters('storageContainerUri')), json('null'), parameters('storageContainerUri'))]",
                "sourceDatabaseId": "[if(empty(parameters('sourceDatabaseId')), json('null'), parameters('sourceDatabaseId'))]",
                "restorableDroppedDatabaseId": "[if(empty(parameters('restorableDroppedDatabaseId')), json('null'), parameters('restorableDroppedDatabaseId'))]",
                "storageContainerSasToken": "[if(empty(parameters('storageContainerSasToken')), json('null'), parameters('storageContainerSasToken'))]",
                "recoverableDatabaseId": "[if(empty(parameters('recoverableDatabaseId')), json('null'), parameters('recoverableDatabaseId'))]",
                "longTermRetentionBackupResourceId": "[if(empty(parameters('longTermRetentionBackupResourceId')), json('null'), parameters('longTermRetentionBackupResourceId'))]"
            },
            "resources": [
                {
                    "type": "providers/locks",
                    "apiVersion": "2016-09-01",
                    "condition": "[parameters('lockForDeletion')]",
                    "name": "Microsoft.Authorization/managedInstanceDatabaseDoNotDelete",
                    "dependsOn": [
                        "[resourceId('Microsoft.Sql/managedInstances/databases', parameters('managedInstanceName'), parameters('databaseName'))]"
                    ],
                    "comments": "Resource lock on Azure SQL managed instance database",
                    "properties": {
                        "level": "CannotDelete"
                    }
                },
                {
                    "type": "Microsoft.Sql/managedInstances/databases/providers/diagnosticsettings",
                    "apiVersion": "2017-05-01-preview",
                    "name": "[concat(parameters('managedInstanceName'), '/', parameters('databaseName') ,'/Microsoft.Insights/service')]",
                    "location": "[parameters('location')]",
                    "condition": "[or(not(empty(parameters('diagnosticStorageAccountId'))),not(empty(parameters('workspaceId'))),not(empty(parameters('eventHubAuthorizationRuleId'))),not(empty(parameters('eventHubName'))))]",
                    "dependsOn": [
                        "[resourceId('Microsoft.Sql/managedInstances/databases', parameters('managedInstanceName'), parameters('databaseName'))]"
                    ],
                    "properties": {
                        "storageAccountId": "[if(empty(parameters('diagnosticStorageAccountId')), json('null'), parameters('diagnosticStorageAccountId'))]",
                        "workspaceId": "[if(empty(parameters('workspaceId')), json('null'), parameters('workspaceId'))]",
                        "eventHubAuthorizationRuleId": "[if(empty(parameters('eventHubAuthorizationRuleId')), json('null'), parameters('eventHubAuthorizationRuleId'))]",
                        "eventHubName": "[if(empty(parameters('eventHubName')), json('null'), parameters('eventHubName'))]",
                        "logs": "[if(and(empty(parameters('diagnosticStorageAccountId')), empty(parameters('workspaceId')), empty(parameters('eventHubAuthorizationRuleId')), empty(parameters('eventHubName'))), json('null'), variables('diagnosticsLogs'))]"
                    }
                },
                // Long Term Retention Policy is Not Supported Yet
                //{
                //   "type": "Microsoft.Sql/managedInstances/databases/backupLongTermRetentionPolicies",
                //    "apiVersion": "2018-06-01-preview",
                //    "name": "[concat(parameters('managedInstanceName'), '/', parameters('databaseName'), '/', parameters('backupLongTermRetentionPoliciesName'))]",
                //     "dependsOn": [
                //        "[resourceId('Microsoft.Sql/managedInstances/databases', parameters('managedInstanceName'), parameters('databaseName'))]"
                //    ],
                //    "properties": {
                //        "weeklyRetention": "[parameters('weeklyRetention')]",
                //        "monthlyRetention": "[parameters('monthlyRetention')]",
                //        "yearlyRetention": "[parameters('yearlyRetention')]",
                //        "weekOfYear": "[parameters('weekOfYear')]"
                //    }
                //}
                {
                    "type": "Microsoft.Sql/managedInstances/databases/backupShortTermRetentionPolicies",
                    "apiVersion": "2017-03-01-preview",
                    "name": "[concat(parameters('managedInstanceName'), '/', parameters('databaseName'), '/', parameters('backupShortTermRetentionPoliciesName'))]",
                    "dependsOn": [
                        "[resourceId('Microsoft.Sql/managedInstances/databases', parameters('managedInstanceName'), parameters('databaseName'))]"
                    ],
                    "properties": {
                        "retentionDays": "[parameters('retentionDays')]"
                    }
                }

            ]
        }
    ],
    "functions": [
    ],
    "outputs": {
        "managedInstanceName": {
            "type": "string",
            "value": "[parameters('managedInstanceName')]",
            "metadata": {
                "description": "The name of the SQL managed instance."
            }
        },
        "managedInstanceResourceId": {
            "type": "string",
            "value": "[resourceId('Microsoft.Sql/managedInstances', parameters('managedInstanceName'))]",
            "metadata": {
                "description": "The Resource ID of the Manged Instance."
            }
        },
        "managedInstanceResourceGroup": {
            "type": "string",
            "value": "[resourceGroup().name]",
            "metadata": {
                "description": "The Resource Group in which the resource has been created."
            }
        }
    }
}
