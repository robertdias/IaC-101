{
  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "parameters": {
    "dataFactoryName": {
      "type": "string",
      "metadata": {
        "description": "Required. The name of the Azure Factory to create"
      }
    },
    "location": {
      "type": "string",
      "defaultValue": "[resourceGroup().location]",
      "metadata": {
        "description": "Optional. Location for all Resources."
      }
    },
    "publicNetworkAccess": {
      "type": "bool",
      "defaultValue": true,
      "metadata": {
        "description": "Optional. Enable or disable public network access."
      }
    },
    "gitConfigureLater": {
      "type": "bool",
      "defaultValue": true,
      "metadata": {
        "description": "Optional. Boolean to define whether or not to configure git during template deployment."
      }
    },
    "gitRepoType": {
      "type": "string",
      "defaultValue": "FactoryVSTSConfiguration",
      "metadata": {
        "description": "Optional. Repo type - can be 'FactoryVSTSConfiguration' or 'FactoryGitHubConfiguration'. Default is 'FactoryVSTSConfiguration'."
      }
    },
    "gitAccountName": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Optional. The account name."
      }
    },
    "gitProjectName": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Optional. The project name. Only relevant for 'FactoryVSTSConfiguration'."
      }
    },
    "gitRepositoryName": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Optional. The repository name."
      }
    },
    "gitCollaborationBranch": {
      "type": "string",
      "defaultValue": "main",
      "metadata": {
        "description": "Optional. The collaboration branch name. Default is 'main'."
      }
    },
    "gitRootFolder": {
      "type": "string",
      "defaultValue": "/",
      "metadata": {
        "description": "Optional. The root folder path name. Default is '/'."
      }
    },
    "vNetEnabled": {
      "defaultValue": false,
      "type": "bool",
      "metadata": {
        "description": "Optional. Enable or disable managed virtual networks and related to that AutoResolveIntegrationRuntime."
      }
    },
    "roleAssignments": {
      "defaultValue": [
      ],
      "type": "array",
      "metadata": {
        "description": "Optional. Array of role assignment objects that contain the 'roleDefinitionIdOrName' and 'principalId' to define RBAC role assignments on this resource. In the roleDefinitionIdOrName attribute, you can provide either the display name of the role definition, or it's fully qualified ID in the following format: '/providers/Microsoft.Authorization/roleDefinitions/c2f4ef07-c644-48eb-af81-4b1b4947fb11'."
      }
    },
    "lockForDeletion": {
      "type": "bool",
      "defaultValue": false,
      "metadata": {
        "description": "Optional. Switch to lock resource from deletion."
      }
    },
    "diagnosticSettingName": {
      "type": "string",
      "defaultValue": "service",
      "metadata": {
        "description": "Optional. The name of the Diagnostic setting."
      }
    },
    "diagnosticLogsRetentionInDays": {
      "type": "int",
      "defaultValue": 365,
      "minValue": 0,
      "maxValue": 365,
      "metadata": {
        "description": "Optional. Specifies the number of days that logs will be kept for; a value of 0 will retain data indefinitely."
      }
    },
    "diagnosticStorageAccountId": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Optional. Resource identifier of the Diagnostic Storage Account."
      }
    },
    "workspaceId": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Optional. Resource identifier of Log Analytics."
      }
    },
    "eventHubAuthorizationRuleId": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Optional. Resource ID of the event hub authorization rule for the Event Hubs namespace in which the event hub should be created or streamed to."
      }
    },
    "eventHubName": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Optional. Name of the event hub within the namespace to which logs are streamed. Without this, an event hub is created for each log category."
      }
    },
    "privateEndpoints": {
      "type": "array",
      "defaultValue": [],
      "metadata": {
        "description": "Optional. Configuration Details for private endpoints."
      }
    },
    "tags": {
      "type": "object",
      "defaultValue": {
      },
      "metadata": {
        "description": "Optional. Tags of the resource."
      }
    },
    "cuaId": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Optional. Customer Usage Attribution id (GUID). This GUID must be previously registered"
      }
    }
  },
  "variables": {
    "version": "V2",
    "builtInRoleNames": {
      "Contributor": "/providers/Microsoft.Authorization/roleDefinitions/b24988ac-6180-42a0-ab88-20f7382dd24c",
      "Data Factory Contributor": "/providers/Microsoft.Authorization/roleDefinitions/673868aa-7521-48a0-acc6-0f60742d39f5",
      "Log Analytics Contributor": "/providers/Microsoft.Authorization/roleDefinitions/92aaf0da-9dab-42b6-94a3-d43ce8d16293",
      "Log Analytics Reader": "/providers/Microsoft.Authorization/roleDefinitions/73c42c96-874c-492b-b04d-ab87d138a893",
      "Managed Application Contributor Role": "/providers/Microsoft.Authorization/roleDefinitions/641177b8-a67a-45b9-a033-47bc880bb21e",
      "Managed Application Operator Role": "/providers/Microsoft.Authorization/roleDefinitions/c7393b34-138c-406f-901b-d8cf2b17e6ae",
      "Managed Applications Reader": "/providers/Microsoft.Authorization/roleDefinitions/b9331d33-8a36-4f8c-b097-4f54124fdb44",
      "masterreader": "/providers/Microsoft.Authorization/roleDefinitions/a48d7796-14b4-4889-afef-fbb65a93e5a2",
      "Monitoring Contributor": "/providers/Microsoft.Authorization/roleDefinitions/749f88d5-cbae-40b8-bcfc-e573ddc772fa",
      "Monitoring Metrics Publisher": "/providers/Microsoft.Authorization/roleDefinitions/3913510d-42f4-4e42-8a64-420c390055eb",
      "Monitoring Reader": "/providers/Microsoft.Authorization/roleDefinitions/43d0d8ad-25c7-4714-9337-8ba259a9fe05",
      "Owner": "/providers/Microsoft.Authorization/roleDefinitions/8e3af657-a8ff-443c-a75c-2fe8c4bcb635",
      "Reader": "/providers/Microsoft.Authorization/roleDefinitions/acdd72a7-3385-48ef-bd42-f606fba81ae7",
      "Resource Policy Contributor": "/providers/Microsoft.Authorization/roleDefinitions/36243c78-bf99-498c-9df9-86d9f8d28608",
      "User Access Administrator": "/providers/Microsoft.Authorization/roleDefinitions/18d7d88d-d35e-4fb5-a5c3-7773c20a72d9"
    },
    "diagnosticsMetrics": [
      {
        "category": "AllMetrics",
        "timeGrain": null,
        "enabled": true,
        "retentionPolicy": {
          "enabled": true,
          "days": "[parameters('diagnosticLogsRetentionInDays')]"
        }
      }
    ],
    "diagnosticsLogs": [
      {
        "category": "ActivityRuns",
        "enabled": true,
        "retentionPolicy": {
          "enabled": true,
          "days": "[parameters('diagnosticLogsRetentionInDays')]"
        }
      },
      {
        "category": "PipelineRuns",
        "enabled": true,
        "retentionPolicy": {
          "enabled": true,
          "days": "[parameters('diagnosticLogsRetentionInDays')]"
        }
      },
      {
        "category": "TriggerRuns",
        "enabled": true,
        "retentionPolicy": {
          "enabled": true,
          "days": "[parameters('diagnosticLogsRetentionInDays')]"
        }
      },
      {
        "category": "SSISPackageEventMessages",
        "enabled": true,
        "retentionPolicy": {
          "enabled": true,
          "days": "[parameters('diagnosticLogsRetentionInDays')]"
        }
      },
      {
        "category": "SSISPackageExecutableStatistics",
        "enabled": true,
        "retentionPolicy": {
          "enabled": true,
          "days": "[parameters('diagnosticLogsRetentionInDays')]"
        }
      },
      {
        "category": "SSISPackageEventMessageContext",
        "enabled": true,
        "retentionPolicy": {
          "enabled": true,
          "days": "[parameters('diagnosticLogsRetentionInDays')]"
        }
      },
      {
        "category": "SSISPackageExecutionComponentPhases",
        "enabled": true,
        "retentionPolicy": {
          "enabled": true,
          "days": "[parameters('diagnosticLogsRetentionInDays')]"
        }
      },
      {
        "category": "SSISPackageExecutionDataStatistics",
        "enabled": true,
        "retentionPolicy": {
          "enabled": true,
          "days": "[parameters('diagnosticLogsRetentionInDays')]"
        }
      },
      {
        "category": "SSISIntegrationRuntimeLogs",
        "enabled": true,
        "retentionPolicy": {
          "enabled": true,
          "days": "[parameters('diagnosticLogsRetentionInDays')]"
        }
      }
    ]
  },
  "resources": [
    // CUA ID
    {
      "condition": "[not(empty(parameters('cuaId')))]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2020-06-01",
      "name": "[concat('pid-', parameters('cuaId'))]",
      "properties": {
        "mode": "Incremental",
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "resources": [
          ]
        }
      }
    },
    // Data Factory
    {
      "condition": "[equals(variables('version'), 'V2')]",
      "type": "Microsoft.DataFactory/factories",
      "apiVersion": "2018-06-01",
      "name": "[parameters('dataFactoryName')]",
      "location": "[parameters('location')]",
      "tags": "[parameters('tags')]",
      "identity": {
        "type": "SystemAssigned" //Currently the only available option
      },
      "properties": {
        "repoConfiguration": "[if(bool(parameters('gitConfigureLater')), json('null'), json(concat('{\"type\": \"', parameters('gitRepoType'), '\",','\"accountName\": \"', parameters('gitAccountName'), '\",','\"repositoryName\": \"', parameters('gitRepositoryName'), '\",', if(equals(parameters('gitRepoType'), 'FactoryVSTSConfiguration'), concat('\"projectName\": \"', parameters('gitProjectName'), '\",'), ''),'\"collaborationBranch\": \"', parameters('gitCollaborationBranch'), '\",','\"rootFolder\": \"', parameters('gitRootFolder'), '\"}')))]",
        "publicNetworkAccess": "[if(bool(parameters('publicNetworkAccess')), 'Enabled', 'Disabled')]"
      },
      "resources": [
        // Managed Virtual Network
        {
          "condition": "[and(equals(variables('version'), 'V2'), parameters('vNetEnabled'))]",
          "name": "[concat(parameters('dataFactoryName'), '/default')]",
          "type": "Microsoft.DataFactory/factories/managedVirtualNetworks",
          "apiVersion": "2018-06-01",
          "properties": {},
          "dependsOn": [
            "[concat('Microsoft.DataFactory/factories/', parameters('dataFactoryName'))]"
          ]
        },
        {
          "condition": "[and(equals(variables('version'), 'V2'), parameters('vNetEnabled'))]",
          "name": "[concat(parameters('dataFactoryName'), '/AutoResolveIntegrationRuntime')]",
          "type": "Microsoft.DataFactory/factories/integrationRuntimes",
          "apiVersion": "2018-06-01",
          "properties": {
            "type": "Managed",
            "managedVirtualNetwork": {
              "referenceName": "default",
              "type": "ManagedVirtualNetworkReference"
            },
            "typeProperties": {
              "computeProperties": {
                "location": "AutoResolve"
              }
            }
          },
          "dependsOn": [
            "[concat('Microsoft.DataFactory/factories/', parameters('dataFactoryName'))]",
            "[concat('Microsoft.DataFactory/factories/', parameters('dataFactoryName'), '/managedVirtualNetworks/default')]"
          ]
        },
        // Lock
        {
          "type": "providers/locks",
          "apiVersion": "2016-09-01",
          "condition": "[parameters('lockForDeletion')]",
          "name": "Microsoft.Authorization/dataFactoryDoNotDelete",
          "dependsOn": [
            "[concat('Microsoft.DataFactory/factories/', parameters('dataFactoryName'))]"
          ],
          "comments": "Resource lock",
          "properties": {
            "level": "CannotDelete"
          }
        },
        // Diagnostic Settings
        {
          "type": "Microsoft.DataFactory/factories/providers/diagnosticsettings",
          "apiVersion": "2017-05-01-preview",
          "name": "[concat(parameters('dataFactoryName'), '/Microsoft.Insights/', parameters('diagnosticSettingName'))]",
          "condition": "[or(not(empty(parameters('diagnosticStorageAccountId'))),not(empty(parameters('workspaceId'))),not(empty(parameters('eventHubAuthorizationRuleId'))),not(empty(parameters('eventHubName'))))]",
          "dependsOn": [
            "[concat('Microsoft.DataFactory/factories/', parameters('dataFactoryName'))]"
          ],
          "properties": {
            "storageAccountId": "[if(empty(parameters('diagnosticStorageAccountId')), json('null'), parameters('diagnosticStorageAccountId'))]",
            "workspaceId": "[if(empty(parameters('workspaceId')), json('null'), parameters('workspaceId'))]",
            "eventHubAuthorizationRuleId": "[if(empty(parameters('eventHubAuthorizationRuleId')), json('null'), parameters('eventHubAuthorizationRuleId'))]",
            "eventHubName": "[if(empty(parameters('eventHubName')), json('null'), parameters('eventHubName'))]",
            "metrics": "[if(and(empty(parameters('diagnosticStorageAccountId')), empty(parameters('workspaceId')), empty(parameters('eventHubAuthorizationRuleId')), empty(parameters('eventHubName'))), json('null'), variables('diagnosticsMetrics'))]",
            "logs": "[if(and(empty(parameters('diagnosticStorageAccountId')), empty(parameters('workspaceId')), empty(parameters('eventHubAuthorizationRuleId')), empty(parameters('eventHubName'))), json('null'), variables('diagnosticsLogs'))]"
          }
        }
      ]
    },
    // RBAC
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2020-06-01",
      "name": "[concat(uniqueString(deployment().name, parameters('location')), '-DataFactory-Rbac-', copyIndex())]",
      "condition": "[not(empty(parameters('roleAssignments')))]",
      "dependsOn": [
        "[parameters('dataFactoryName')]"
      ],
      "copy": {
        "name": "dataFactoryRbacDeplCopy",
        "count": "[length(parameters('roleAssignments'))]"
      },
      "properties": {
        "mode": "Incremental",
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "parameters": {
          "roleAssignment": {
            "value": "[parameters('roleAssignments')[copyIndex()]]"
          },
          "builtInRoleNames": {
            "value": "[variables('builtInRoleNames')]"
          },
          "dataFactoryName": {
            "value": "[parameters('dataFactoryName')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "parameters": {
            "roleAssignment": {
              "type": "object"
            },
            "builtInRoleNames": {
              "type": "object"
            },
            "dataFactoryName": {
              "type": "string"
            }
          },
          "resources": [
            {
              "type": "Microsoft.DataFactory/factories/providers/roleAssignments",
              "apiVersion": "2020-04-01-preview",
              "name": "[concat(parameters('dataFactoryName'), '/Microsoft.Authorization/', guid(parameters('dataFactoryName'), array(parameters('roleAssignment').principalIds)[copyIndex('dataFactoryInnerRbacCopy')], parameters('roleAssignment').roleDefinitionIdOrName ))]",
              "dependsOn": [
              ],
              "copy": {
                "name": "dataFactoryInnerRbacCopy",
                "count": "[length(parameters('roleAssignment').principalIds)]"
              },
              "properties": {
                "roleDefinitionId": "[if(contains(parameters('builtInRoleNames'), parameters('roleAssignment').roleDefinitionIdOrName ), parameters('builtInRoleNames')[parameters('roleAssignment').roleDefinitionIdOrName] , parameters('roleAssignment').roleDefinitionIdOrName )]",
                "principalId": "[array(parameters('roleAssignment').principalIds)[copyIndex()]]"
              }
            }
          ]
        }
      }
    },
    // Private Endpoints
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2020-06-01",
      "name": "[concat(uniqueString(deployment().name, parameters('location')), '-DataFactory-PrivateEndpoints','-',copyIndex())]",
      "condition": "[not(empty(parameters('privateEndpoints')))]",
      "dependsOn": [
        "[parameters('dataFactoryName')]"
      ],
      "copy": {
        "name": "privateEndpointsCopy",
        "count": "[length(parameters('privateEndpoints'))]"
      },
      "properties": {
        "mode": "Incremental",
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "parameters": {
          "privateEndpointResourceId": {
            "value": "[resourceId('Microsoft.DataFactory/factories/', parameters('dataFactoryName'))]"
          },
          "privateEndpointVnetLocation": {
            "value": "[if(empty(parameters('privateEndpoints')),'dummy',reference(split(parameters('privateEndpoints')[copyIndex()].subnetResourceId,'/subnets/')[0],'2020-06-01', 'Full').location)]"
          },
          "privateEndpoint": {
            "value": "[parameters('privateEndpoints')[copyIndex()]]"
          },
          "tags": {
            "value": "[parameters('tags')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "parameters": {
            "privateEndpointResourceId": {
              "type": "string"
            },
            "privateEndpointVnetLocation": {
              "type": "string"
            },
            "privateEndpoint": {
              "type": "object"
            },
            "tags": {
              "type": "object"
            }
          },
          "variables": {
            "privateEndpointResourceName": "[last(split(parameters('privateEndpointResourceId'),'/'))]",
            "privateEndpoint": {
              "name": "[if(contains(parameters('privateEndpoint'), 'name'),if(empty(parameters('privateEndpoint').name),concat(variables('privateEndpointResourceName'),'-',parameters('privateEndpoint').service),parameters('privateEndpoint').name),concat(variables('privateEndpointResourceName'),'-',parameters('privateEndpoint').service))]",
              "subnetResourceId": "[parameters('privateEndpoint').subnetResourceId]",
              "service": [
                "[parameters('privateEndpoint').service]"
              ],
              "privateDnsZoneResourceIds": "[if(contains(parameters('privateEndpoint'), 'privateDnsZoneResourceIds'),if(empty(parameters('privateEndpoint').privateDnsZoneResourceIds),createArray(),parameters('privateEndpoint').privateDnsZoneResourceIds),createArray())]",
              "customDnsConfigs": "[if(contains(parameters('privateEndpoint'), 'customDnsConfigs'),if(empty(parameters('privateEndpoint').customDnsConfigs),json('null'),parameters('privateEndpoint').customDnsConfigs),json('null'))]"
            }
          },
          "resources": [
            {
              "type": "Microsoft.Network/privateEndpoints",
              "apiVersion": "2020-05-01",
              "name": "[variables('privateEndpoint').name]",
              "location": "[parameters('privateEndpointVnetLocation')]",
              "tags": "[parameters('tags')]",
              "properties": {
                "privateLinkServiceConnections": [
                  {
                    "name": "[variables('privateEndpoint').name]",
                    "properties": {
                      "privateLinkServiceId": "[parameters('privateEndpointResourceId')]",
                      "groupIds": "[variables('privateEndpoint').service]"
                    }
                  }
                ],
                "manualPrivateLinkServiceConnections": [],
                "subnet": {
                  "id": "[variables('privateEndpoint').subnetResourceId]"
                },
                "customDnsConfigs": "[variables('privateEndpoint').customDnsConfigs]"
              }
            },
            {
              "type": "Microsoft.Network/privateEndpoints/privateDnsZoneGroups",
              "apiVersion": "2020-05-01",
              "condition": "[not(empty(variables('privateEndpoint').privateDnsZoneResourceIds))]",
              "name": "[concat(variables('privateEndpoint').name, '/default')]",
              "dependsOn": [
                "[resourceId('Microsoft.Network/privateEndpoints', variables('privateEndpoint').name)]"
              ],
              "properties": {
                "copy": [
                  {
                    "name": "privateDnsZoneConfigs",
                    "count": "[length(variables('privateEndpoint').privateDnsZoneResourceIds)]",
                    "input": {
                      "name": "[last(split(variables('privateEndpoint').privateDnsZoneResourceIds[copyIndex('privateDnsZoneConfigs')],'/'))]",
                      "properties": {
                        "privateDnsZoneId": "[variables('privateEndpoint').privateDnsZoneResourceIds[copyIndex('privateDnsZoneConfigs')]]"
                      }
                    }
                  }
                ]
              }
            }
          ]
        }
      }
    }
  ],
  "functions": [
  ],
  "outputs": {
    "dataFactoryName": {
      "type": "string",
      "value": "[parameters('dataFactoryName')]",
      "metadata": {
        "description": "The Name of the Azure Data Factory instance"
      }
    },
    "dataFactoryResourceId": {
      "type": "string",
      "value": "[resourceId('Microsoft.DataFactory/factories',parameters('dataFactoryName'))]",
      "metadata": {
        "description": "The Resource Id of the Data factory"
      }
    },
    "dataFactoryResourceGroup": {
      "type": "string",
      "value": "[resourceGroup().name]",
      "metadata": {
        "description": "The name of the Resource Group with the Data factory"
      }
    }
  }
}
