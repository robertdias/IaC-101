#########################################################
## DEPLOYMENT PIPELINE                                 ##
#########################################################
##
## This pipeline template contains the logic to deploy a given module's ARM template using the provided parameter file(s) 
##
## Enabled levels of deployment
## - Resource-Group-Level
## - Subscription-Level
## - Management-Group-Level
## - Tenant-Level
##
#########################################################
##
##---------------------------------------------##
## TEMPLATE PARAMETERS                         ##
##---------------------------------------------##
##
## By default it uses the variables specified in the below [parameters] section. However, you can overwrite these variables in the 
##    referencing pipeline by providing the parameter explicitly.
## 
## NOTE: If you don't need to overwrite a shared value, you can IGNORE this section 
##
##   |=================================================================================================================================================================================================================================|
##   | Parameter                       | Default Value                        | Description                                                                                               | Example                                    |
##   |---------------------------------|--------------------------------------|-----------------------------------------------------------------------------------------------------------|--------------------------------------------|
##   | serviceConnection               | '$(serviceConnection)'               | The service connection that connects to Azure                                                             | 'demo-internal'                            |
##   | removeDeployment                | '$(removeDeployment)'                | Set to [true] to flag resource for removal. If not provided, defaults to false.                           | 'true'                                     |
##   | poolName                        | '$(poolName)'                        | You can provide either a [poolname] or [vmImage] to run the job on                                        | 'Custom Deployment Pool'                   |
##   | vmImage                         | '$(vmImage)'                         | You can provide either a [poolname] or [vmImage] to run the job on                                        | 'ubuntu20.04'                              |
##   | defaultJobTimeoutInMinutes      | 120                                  | The timeout for the job in this pipeline                                                                  | 120                                        |
##   | checkoutRepositories            | ''                                   | An optional list of repositories to check out at the beginning of this job in addition to the source      | 'Components'                               |
##   | moduleName                      | '$(moduleName)'                      | The name of the module to deploy                                                                          | 'KeyVault'                                 |
##   | modulePath                      | '$(modulePath)'                      | The path to the module to deploy. E.g. [$(modulesPath)/$(moduleName)]                                     | '$(modulesPath)/$(moduleName)'             |
##   | modulesPath                     | '$(modulesPath)'                     | The path to the modules folder root (one level above [modulePath])                                        | 'Modules/ARM'                              |
##   | parametersPath                  | '$(parametersPath)'                  | The path to the modules parameter file                                                                    | '$(modulePath)/Parameters'                 |
##   | deploymentBlocks                |                                      | The parameter file(s) to deploy with. Must be provided                                                    | path: '$(parametersPath)/parameters.json'  |
##   | parametersRepository            | '$(Build.Repository.Name)'           | The respository with the parameter files. Defaults to the triggering repository                           | 'Solutions'                                |
##   | location                        | '$(location)'                        | The location to deploy with                                                                               | 'EastUs2'                                  |
##   | resourceGroupName               | '$(resourceGroupName)'               | The resourcegroup to deploy into. Required only for Resource-Group-Level deployments                      | 'validation-rg'                            |
##   | managementGroupId               | '$(managementGroupId)'               | The id of the management group to deploy into. Required only for Management-Group-Level deployments       | '6ycc9620-cb01-454f-9ebc-fc6b1df48d64'     |
##   | azurePowerShellVersion          | '$(azurePowerShellVersion)'          | Used for configuring the Azure PowerShellModules Version, one of the example values.                      | 'latestVersion' or 'OtherVersion'          |
##   | preferredAzurePowerShellVersion | '$(preferredAzurePowerShellVersion)' | Used for configuring the Azure PowerShellModules Version, either an empty string or the specific version. | '4.4.0'                                    |
##   |=================================================================================================================================================================================================================================|
##
##---------------------------------------------##

parameters:
  
  # Pipeline-related parameters
  serviceConnection: '$(serviceConnection)'
  poolName: '$(poolName)'
  vmImage: '$(vmImage)'
  defaultJobTimeoutInMinutes: 120
  checkoutRepositories: ''
  dependsOn: []
  # Logic-related parameters
  removeDeployment: false
  moduleName: '$(moduleName)'
  modulePath: '$(modulePath)'
  parametersPath: '$(parametersPath)'
  modulesPath: '$(modulesPath)'
  deploymentBlocks: ''
  parametersRepository: '$(Build.Repository.Name)'
  location: '$(location)'
  resourceGroupName: '$(resourceGroupName)'
  managementGroupId: '$(managementGroupId)'
  # Azure PowerShell Version parameters
  azurePowerShellVersion: '$(azurePowerShellVersion)'
  preferredAzurePowerShellVersion: '$(preferredAzurePowerShellVersion)'

##---------------------------------------------##
## TEMPLATE LOGIC                              ##
##---------------------------------------------##
jobs:
- ${{ each deploymentBlock in parameters.deploymentBlocks }}:
  - job: ${{ deploymentBlock.jobName }}
    ${{ if ne( deploymentBlock.displayName, '') }}:
      displayName: ${{ deploymentBlock.displayName }}
    ${{ if eq( deploymentBlock.displayName, '') }}:
      displayName: Deploy with [${{ replace( deploymentBlock.path, '$(parametersPath)', '') }}]
    timeoutInMinutes: ${{ parameters.defaultJobTimeoutInMinutes }}
    ${{ if ne( parameters.dependsOn, '') }}:
      dependsOn: ${{ parameters.dependsOn }}
    pool:
      ${{ if ne(parameters.vmImage, '') }}:
        vmImage: ${{ parameters.vmImage }}
      ${{ if ne(parameters.poolName, '') }}:
        name: ${{ parameters.poolName }}
    steps:

    # [Checkout Repositories] task(s)
    #--------------------------------
    - checkout: self
    - ${{ if ne(parameters.checkoutRepositories, '') }}:
      - ${{ each checkoutRepository in parameters.checkoutRepositories }}:
        - checkout: ${{ checkoutRepository }}
          fetchDepth: 1  # the depth of commits to ask Git to fetch; if not set defaults to no limit
          path: 's/${{ checkoutRepository }}'

    # [Deployment] task(s)
    #--------------------------------
    - task: AzurePowerShell@5
      displayName: 'Deploy [${{ parameters.moduleName }}] via connection [${{ parameters.serviceConnection }}]'
      inputs:
        azureSubscription:  ${{ parameters.serviceConnection }}
        azurePowerShellVersion: ${{ parameters.azurePowerShellVersion }}
        preferredAzurePowerShellVersion: ${{ parameters.preferredAzurePowerShellVersion }}
        pwsh: true
        ScriptType: InlineScript
        inline: |
          # ---------------------------- #
          # HANDLE MULTI-REPO INVOCATION #
          # ---------------------------- #
          $componentsBasePath = "$(System.DefaultWorkingDirectory)"
          $parametersBasePath = "$(Build.Repository.LocalPath)"

          if( "${{ join(';',parameters.checkoutRepositories) }}".length -gt 0) {
            $componentsBasePath = Join-Path $componentsBasePath '$(modulesRepository)'
            $parametersBasePath = "$(Build.Repository.LocalPath)/${{ parameters.parametersRepository }}"
          }

          # Load used functions
          . "$(System.DefaultWorkingDirectory)/$(templateFunctionsPath)/New-ModuleDeployment.ps1"
          
          # ----------------- #
          # INVOKE DEPLOYMENT #
          # ----------------- #
          $functionInput = @{
            moduleName         = '${{ parameters.moduleName }}'
            componentsBasePath = $componentsBasePath
            parametersBasePath = $parametersBasePath 
            modulePath         = '${{ parameters.modulePath }}' 
            parameterFilePath  = '${{ deploymentBlock.path }}' 
            location           = '${{ parameters.location }}' 
            resourceGroupName  = '${{ parameters.resourceGroupName }}'
            managementGroupId  = '${{ parameters.managementGroupId }}'
            # Note: if parameter is like "`$(removeDeployment*" it was not set as the variable was not resolved
            removeDeployment   = ('${{ parameters.removeDeployment }}' -like "`$(removeDeployment*") ? $false : [System.Convert]::ToBoolean('${{ parameters.removeDeployment }}')
          }

          Write-Verbose "Invoke task with" -Verbose
          $functionInput

          New-ModuleDeployment @functionInput -Verbose
